import copy


class Fraction:
    def __init__(self, x = '', y = 0):
        if type(x) == Fraction:
            self.a = x.a
            self.b = x.b
        elif x == '' and y == 0:
            self.a = 0
            self.b = 1
        elif y == 0:
            if '/' in str(x):
                self.a, self.b = list(map(int, x.split('/')))
            elif ' ' in str(x):
                self.a, self.b = list(map(int, x.split()))
            else:
                self.a = int(x)
                self.b = 1
        else:
            self.a = x
            self.b = y
        self.reduce()

    def __str__(self):
        self.reduce()
        if self.b != 1:
            return str(str(self.a) + '/' + str(self.b))
        return str(self.a)

    def reduce(self):
        a, b = self.a, self.b
        while b:
            a, b = b, a % b
        self.a //= a
        self.b //= a

    def __lt__(self, other):
        if type(other) == Fraction:
            if self.b < 0:
                self.b = -self.b
                self.a = -self.a
            if other.b < 0:
                other.b = -other.b
                other.a = -other.a
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            return a1 * b2 < a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a < other * b

    def __le__(self, other):
        if type(other) == Fraction:
            if self.b < 0:
                self.b = -self.b
                self.a = -self.a
            if other.b < 0:
                other.b = -other.b
                other.a = -other.a
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            return a1 * b2 <= a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a <= other * b

    def __eq__(self, other):
        if type(other) == Fraction:
            if self.b < 0:
                self.b = -self.b
                self.a = -self.a
            if other.b < 0:
                other.b = -other.b
                other.a = -other.a
            b1, b2 = self.b, other.b
            a1, a2 = int(self.a), int(other.a)
            return a1 * b2 == a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a == other * b

    def __ne__(self, other):
        if type(other) == Fraction:
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            return a1 * b2 != a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a != other * b

    def __gt__(self, other):
        if type(other) == Fraction:
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            return a1 * b2 > a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a > other * b

    def __ge__(self, other):
        if type(other) == Fraction:
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            return a1 * b2 >= a2 * b1
        elif type(other) == int or type(other) == float:
            self.reduce()
            b, a = self.b, self.a
            return a >= other * b

    def __int__(self):
        return self.a // self.b

    def __float__(self):
        return self.a / self.b

    def __round__(self, x = 0):
        return round(self.a / self.b, x)

    def __pos__(self):
        return Fraction(+self.a, self.b)

    def __abs__(self):
        return Fraction(abs(self.a), abs(self.b))

    def __neg__(self):
        self = Fraction(self)
        return Fraction(-self.a, self.b)

    def __add__(self, other):
        if type(other) == float:
            return self.a / self.b + other
        elif type(self) == float:
            return other.a / other.b + self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            A = Fraction()
            A.a, A.b = a1 * b2 + a2 * b1, b1 * b2
            return A

    def __radd__(self, other):
        if type(other) == float:
            return self.a / self.b + other
        elif type(self) == float:
            return other.a / other.b + self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            A = Fraction()
            A.a, A.b = a1 * b2 + a2 * b1, b1 * b2
            return A

    def _iadd__(self, other):
        if type(other) == float:
            self = self.a / self.b + other
            return self
        elif type(self) == float:
            self = other.a / other.b + self
            return self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            self.a, self.b = a1 * b2 + a2 * b1, b1 * b2
            return A

    def __sub__(self, other):
        if type(other) == float:
            return self.a / self.b - other
        elif type(self) == float:
            return -other.a / other.b + self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            A = Fraction()
            A.a, A.b = a1 * b2 - a2 * b1, b1 * b2
            return A

    def __rsub__(self, other):
        if type(other) == float:
            return -self.a / self.b + other
        elif type(self) == float:
            return -other.a / other.b + self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            A = Fraction()
            A.a, A.b = -a1 * b2 + a2 * b1, b1 * b2
            return A

    def _isub__(self, other):
        if type(other) == float:
            self = self.a / self.b - other
            return self
        elif type(self) == float:
            self = -other.a / other.b + self
            return self
        else:
            self, other = Fraction(self), Fraction(other)
            b1, b2 = self.b, other.b
            a1, a2 = self.a, other.a
            self.a, self.b = a1 * b2 - a2 * b1, b1 * b2
            return A

    def __mul__(self, other):
        if type(other) == float:
            return self.a / self.b * other
        other = Fraction(other)
        A = (Fraction(self.a * other.a, self.b * other.b))
        A.reduce()
        return A

    def __rmul__(self, other):
        if type(other) == float:
            return self.a / self.b * other
        self, other = Fraction(self), Fraction(other)
        A = (Fraction(self.a * other.a, self.b * other.b))
        A.reduce()
        return A

    def __imul__(self, other):
        if type(other) == float:
            return self.a / self.b * other
        other = Fraction(other)
        self = (Fraction(self.a * other.a, self.b * other.b))
        self.reduce()
        return self

    def __truediv__(self, other):
        if type(other) == float:
            return self.a / self.b / other
        other = Fraction(other)
        A = (Fraction(self.a * other.b, self.b * other.a))
        A.reduce()
        return A

    def __rtruediv__(self, other):
        if type(other) == float:
            return other / (self.a / self.b)
        self, other = Fraction(self), Fraction(other)
        A = (Fraction(self.b * other.a, self.a * other.b))
        A.reduce()
        return A

    def __itruediv__(self, other):
        if type(other) == float:
            return self.a / self.b / other
        other = Fraction(other)
        self = (Fraction(self.a * other.b, self.b * other.a))
        self.reduce()
        return self


class Poly():
    def __init__(self, x = [0]):
        if type(x) in [int, Fraction, float]:
            self.x = [x]
        elif type(x) == list:
            self.x = copy.deepcopy(x)
        elif type(x) == str:
            b = []
            for elem in x.split():
                b.append(eval(elem))
            self.x = b
        elif x == [0]:
            self.x = [0]
        elif type(x) == Poly:
            self.x = copy.deepcopy(x.x)
        elif type(x) == tuple:
            self.x = list(x)




import sys
exec(sys.stdin.read())
def __str__(self):
    poly = ''
    k = self.koef
    powers = [8304, 185, 178, 179, 8308, 8309, 8310, 8311, 8312, 8313]
    for i in range(len(k) - 1, -1, -1):
        power = list(str(i))
        a = k[i]
        pow = ''
        for j in power:
            pow += chr(powers[int(j)])
        a = k[i]
        if a < 0 and (i != len(k) - 1 and poly != ''):
            poly += '-' + ' '
        elif a > 0 and (i != len(k) - 1 and poly != ''):
            poly += '+' + ' '
        elif (i == len(k) - 1 or poly == '') and a < 0:
            poly += '-'
            a = abs(a)
        if type(a) == Fraction:
            a.reduce()
        if a.b != 1:
            a = '(' + str(a) + ')'
        elif type(a) == float:
            if a != 0.0:
                a = str(round(a, 3))
            else:
                a = 0
        if a == 1 and i != 0:
            a = ''
        if a != 0:
            if i == 0:
                poly += str(a)
            elif i == 1:
                poly += str(a) + 'x' + ' '
        else:
            poly += str(a) + 'x' + pow + ' '
        if poly == '':
            return '0'
        else:
            return poly

print(Poly('1 2 3 4 5 6 7 8'))
import sys
exec(sys.stdin.read())