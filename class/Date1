class Date:
    __slots__ = ['__day', '__month', '__year']

    def __init__(self, x = '', b = 0, c = 0):
        if x == '':
            self.__day, self.__month, self.__year = 1, 1, 1
        elif '0' <= x[0] <= '9':
            self.__day, self.__month, self.__year = map(int, x.split('.'))
        elif c != 0:
            self.__day, self.__month, self.__year = int(x), int(b), int(c)
        else:
            a, b, c = x.split()
            self.__day, self.__month, self.__year = int(b[:-1]), MonthNums[a], int(c)
   
    def NextDay(self):
        other = Date()
        other.__day = self.__day
        other.__month = self.__month
        other.__year = self.__year
        if other.__day + 1 <= Months[other.__month]:
            other.__day += 1
        elif other.__day == 31 and other.__month == 12:
            other.__year += 1
            other.__month = 1
            other.__day = 1
        elif other.__day != 29 and (other.__month == 2 and (other.__year % 4 == 0 and other.__year % 100 != 0) or other.__year % 400 == 0):
            other.__day += 1
        else:
            other.__day = 1
            other.__month += 1
        return other

    def PrevDay(self):
        other = Date()
        other.__day = self.__day
        other.__month = self.__month
        other.__year = self.__year
        if other.__day == 1 and other.__month == 1:
            other.__year -= 1
            other.__month = 12
            other.__day = 31
        elif other.__day - 1 != 0:
            other.__day -= 1
        elif other.__month == 3 and ((other.__year % 4 == 0 and other.__year % 100 != 0) or self.__year % 400 == 0 and other.__day == 1):
            other.__day = 29
            other.__month -= 1
        else:
            other.__day = Months[other.__month - 1]
            other.__month -= 1
        return other

    def __sub__(self, other):
        return int(other) - int(self)

    def MonDig(x):
        i = 0
        days = d
        while i < m:
            days += Months[i]
            i += 1
        return days

    def WhatDay(self):
        a = (14 - self.__month) // 12
        year = self.__year - a
        month = self.__month + 12 * a - 2
        result = ((7000 + (self.__day + year + year // 4 - year // 100 + year // 400 + (31 * month) // 12)) % 7) - 1
        return DayOfTheWeek[result]
    
    def ChangeForm_DtoW(self):
        d = self.__day
        m = self.__month
        y = self.__year   
        return str(MonthNames[m] + ' ' + str(d) + ', ' + str(y))
    
    def ChangeForm_WtoD(self):
        d = self.__day
        m = self.__month
        y = self.__year
        return (str(d).rjust(2, '0') + '.' + str(m).rjust(2, '0') + '.' + str(y).rjust(4, '0'))
        
    def __int__(self):
        i = 1
        year = int(self.__year)
        month = int(self.__month)
        num = 0
        while i != year:
            if (i % 4 == 0 and i % 100 != 0) or i % 400 == 0:
                num += 1
            num += 365
            i += 1
        i = 1
        while i != month:
            num += Months[i]
            i += 1
        return num + int(self.__day)

    def __int__(self):
        if type(self) == Date:
            days = self.__day + (self.__year - 1) * 365 + (self.__year - 1) // 4 - (self.__year - 1) // 100 + (self.__year - 1) // 400
            for i in range(self.__month):
                days += Months[i]
            if self.__month > 2 and (self.__year % 400 == 0 or (self.__year % 4 == 0 and self.__year % 100 != 0)):
                days += 1
            return days
        else:
            n = self
            self = Date()
            self.__year = 1 + ((n - 1) // (400 * 365 + 100 - 4 + 1)) * 400 + ((n - 1) % (400 * 365 + 100 - 4 + 1) // (100 * 365 + 25 - 1)) * 100 + ((n - 1) % (400 * 365 + 100 - 4 + 1) % (100 * 365 + 25 - 1) // (4 * 365 + 1)) * 4 + ((n - 1) % (400 * 365 + 100 - 4 + 1) % (100 * 365 + 25 - 1) % (4 * 365 + 1) // 365)
            print(self)
            days = (n - 1) % 365
            i = 1
            print(days)
            while days > Months[i] and not(((self.__year % 4 == 0 and self.__year % 100 != 0) or (self.__year % 400 == 0)) and i == 2 and days == 29):
                days -= Months[i]
                i += 1
                print(days)
            self.__month = i
            self.__day += days
            if (((self.__year % 4 == 0 and self.__year % 100 != 0) or (self.__year % 400 == 0)) and ((self.__month == 2 and days > 29) or self.__month > 2) or (((self.__year - 1) % 4 == 0 and (self.__year - 1) % 100 != 0) or ((self.__year - 1) % 400 == 0))):# and self.__month == self.__day):
                self = self.PrevDay()
                print(days * 1000000000)
            return self
''' def __int__(self):
        i = 1
        year = int(self.__year)
        month = int(self.__month)
        num = 0
        while i != year:
            if (i % 4 == 0 and i % 100 != 0) or i % 400 == 0:
                num += 1
            num += 365
            i += 1
        i = 1
        while i != month:
            num += Months[i]
            i += 1
        return num + int(self.__day)
'''
    def Birthday(bir, self):
        i = 0
        while self.__day != bir.__day or self.__month != bir.__month:
            self = self.NextDay()
            i += 1
        return i

    def __str__(self):
        return (str(self.__day).rjust(2, '0') + '.' + str(self.__month).rjust(2, '0') + '.' + str(self.__year).rjust(4, '0'))


MonthNames = ('', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
DayOfTheWeek = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
MonthNums = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}
Months = (0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
for i in range(int(input())):
    a = int(input())
    print(int(Date.__int__(a)))
    print(Date.__int__(a))
