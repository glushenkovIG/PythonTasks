class Date:
    __slots__ = ['__day', '__month', '__year']

    def __init__(self, x = '', b = '', c = ''):
        if x.count('.') == 1:
            self.__day, self.__month = map(int, x.split('.'))
            self.__year = 1
        elif x == '':
            self.__day, self.__month, self.__year = 1, 1, 1
        elif '0' <= x[0] <= '9':
            self.__day, self.__month, self.__year = map(int, x.split('.'))
        else:
            a, b, c = x.split()
            self.__day, self.__month, self.__year = int(b[:-1]), MonthNums[a], int(c)
   
    def NextDay(self):
        other = Date()
        other.__day = self.__day
        other.__month = self.__month
        other.__year = self.__year
        if other.__day + 1 <= Months[other.__month]:
            other.__day += 1
        elif other.__day == 31 and other.__month == 12:
            other.__year += 1
            other.__month = 1
            other.__day = 1
        elif other.__day != 29 and (other.__month == 2 and ((other.__year % 4 == 0 and other.__year % 100 != 0) or other.__year % 400 == 0)):
            other.__day += 1
        else:
            other.__day = 1
            other.__month += 1
        return other
    
    def PrevDay(self):
        other = Date()
        other.__day = self.__day
        other.__month = self.__month
        other.__year = self.__year
        if other.__day == 1 and other.__month == 1:
            other.__year -= 1
            other.__month = 12
            other.__day = 31
        elif other.__day - 1 != 0:
            other.__day -= 1
        elif other.__month == 3 and ((other.__year % 4 == 0 and other.__year % 100 != 0) or self.__year % 400 == 0 and other.__day == 1):
            other.__day = 29
            other.__month -= 1
        else:
            other.__day = Months[other.__month - 1]
            other.__month -= 1
        return other

    def __sub__(self, other):
        return int(other) - int(self)

    def MonDig(x):
        i = 0
        days = d
        while i < m:
            days += Months[i]
            i += 1
        return days

    def WhatDay(self):
        a = (14 - self.__month) // 12
        year = self.__year - a
        month = self.__month + 12 * a - 2
        result = ((7000 + (self.__day + year + year // 4 - year // 100 + year // 400 + (31 * month) // 12)) % 7) - 1
        return DayOfTheWeek[result]
    
    def ChangeForm_DtoW(self):
        d = self.__day
        m = self.__month
        y = self.__year   
        return str(MonthNames[m] + ' ' + str(d) + ', ' + str(y))
    
    def ChangeForm_WtoD(self):
        d = self.__day
        m = self.__month
        y = self.__year
        return (str(d).rjust(2, '0') + '.' + str(m).rjust(2, '0') + '.' + str(y).rjust(4, '0'))
        
    def __int__(self):
        if type(self) == Date:
            days = self.__day + (self.__year - 1) * 365 + (self.__year - 1) // 4 - (self.__year - 1) // 100 + (self.__year - 1) // 400
            for i in range(self.__month):
                days += Months[i]
            if self.__month > 2 and (self.__year % 400 == 0 or (self.__year % 4 == 0 and self.__year % 100 != 0)):
                days += 1
            return days
        else:
            n = self
            self = Date()
            self.__year = 1 + ((n - 1) // (400 * 365 + 100 - 4 + 1)) * 400 + ((n - 1) % (400 * 365 + 100 - 4 + 1) // (100 * 365 + 25 - 1)) * 100 + ((n - 1) % (400 * 365 + 100 - 4 + 1) % (100 * 365 + 25 - 1) // (4 * 365 + 1)) * 4 + ((n - 1) % (400 * 365 + 100 - 4 + 1) % (100 * 365 + 25 - 1) % (4 * 365 + 1) // 365)
            days = n - int(self)
            if days == -1:
                self.__day = 31
                self.__month = 12
                self.__year -= 1
                return self
            i = 1
            while days > Months[i]:
                days -= Months[i]
                i += 1
            self.__month = i
            self.__day += days

    def Birthday(self, other):
        i = 0
        while i < 3777 and not (self.__day == other.__day and self.__month == other.__month):
            i += 1
            other = other.NextDay()
        return i

    def __gt__(self, other):
        if self.__year > other.__year or ((self.__year == other.__year) and self.__month > other.__month) or ((self.__year == other.__year) and self.__month == other.__month and self.__day > other.__day):
            return True
        return False

    def __ge__(self, other):
        if self.__year > other.__year or ((self.__year == other.__year) and self.__month > other.__month) or ((self.__year == other.__year) and self.__month == other.__month and self.__day > other.__day) or ((self.__year == other.__year) and self.__month == other.__month and self.__day == other.__day):
            return True
        return False

    def __eq__(self, other):
        if (self.__year == other.__year) and self.__month == other.__month and self.__day == other.__day:
            return True
        return False

    def Old(n):
        Count = 1
        n_Sun = 0
        min_date = Date('31.12.9999')
        for i in range(n):
            Surname, Name, date = input().split()
            date = Date(date)
            if min_date > date:
                min_date = date
                Count = 1
                n_Sun = (Surname, Name)
            elif date == min_date:
                Count += 1
            else:
                Count = 1
        if Count != 1:
            return str(min_date) + ' ' + str(Count)
        return str(min_date) + ' ' + ' '.join(n_Sun)

    def NearBir(self):
        min_bir = 7
        min_peop = 1
        for i in range(int(input())):
            SurName, Name, date = input().split()
            date = Date(date)
            days2bir = Date.Birthday(date, self)
            if days2bir <= 7 and 0 < days2bir < min_bir:
                min_bir = days2bir
                min_peop = (SurName, Name)
        if min_bir != 7:
            return str(min_peop[0]) + ' ' + str(min_peop[1])
        return 'No birthdays in next week'
    
    def __str__(self):
        return (str(self.__day).rjust(2, '0') + '.' + str(self.__month).rjust(2, '0') + '.' + str(self.__year).rjust(4, '0'))


MonthNames = ('', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
DayOfTheWeek = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
MonthNums = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}
Months = (0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
print(Date(input()).NearBir())
    
